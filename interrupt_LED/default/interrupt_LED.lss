
interrupt_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c4  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000108  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d9  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e0  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000096  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#define DataPort	PORTC	// Using PortC as our Dataport
#define DataDDR		DDRC
 
//Interrupt Service Routine for INT0
ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	80 e5       	ldi	r24, 0x50	; 80
  86:	93 ec       	ldi	r25, 0xC3	; 195
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <__vector_1+0x1c>
	unsigned char i, temp;
 
	_delay_ms(50); // Software debouncing control
 
	temp = DataPort;	// Save current value on DataPort
  8c:	35 b3       	in	r19, 0x15	; 21
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	40 e5       	ldi	r20, 0x50	; 80
  92:	53 ec       	ldi	r21, 0xC3	; 195
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
	{
		DataPort = 0x00;
		_delay_ms(50);	// Wait 5 seconds
		DataPort = 0xFF;
  94:	6f ef       	ldi	r22, 0xFF	; 255
	temp = DataPort;	// Save current value on DataPort
 
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
	{
		DataPort = 0x00;
  96:	15 ba       	out	0x15, r1	; 21
  98:	ca 01       	movw	r24, r20
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <__vector_1+0x2e>
		_delay_ms(50);	// Wait 5 seconds
		DataPort = 0xFF;
  9e:	65 bb       	out	0x15, r22	; 21
  a0:	ca 01       	movw	r24, r20
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__vector_1+0x36>
	_delay_ms(50); // Software debouncing control
 
	temp = DataPort;	// Save current value on DataPort
 
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	25 30       	cpi	r18, 0x05	; 5
  aa:	a9 f7       	brne	.-22     	; 0x96 <__vector_1+0x2a>
		_delay_ms(50);	// Wait 5 seconds
		DataPort = 0xFF;
		_delay_ms(50);	// Wait 5 seconds
	}
 
	DataPort = temp;	//Restore old value to DataPort	
  ac:	35 bb       	out	0x15, r19	; 21
}	
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	6f 91       	pop	r22
  b4:	5f 91       	pop	r21
  b6:	4f 91       	pop	r20
  b8:	3f 91       	pop	r19
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:
 
int main(void)
{
	DDRD = 1<<PD2;		// Set PD2 as input (Using for interupt INT0)
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;		// Enable PD2 pull-up resistor
  ca:	82 bb       	out	0x12, r24	; 18
 
	DataDDR = 0xFF;		// Configure Dataport as output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 bb       	out	0x14, r24	; 20
	DataPort = 0x01;	// Initialise Dataport to 1
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	85 bb       	out	0x15, r24	; 21
 
	GICR = 1<<INT0;					// Enable INT0
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	85 bf       	out	0x35, r24	; 53
 
	sei();				//Enable Global Interrupt
  dc:	78 94       	sei
 
    while(1)
    {
		if(DataPort >= 0x80)
			DataPort = 1;
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	20 e5       	ldi	r18, 0x50	; 80
  e2:	33 ec       	ldi	r19, 0xC3	; 195
 
	sei();				//Enable Global Interrupt
 
    while(1)
    {
		if(DataPort >= 0x80)
  e4:	af 9b       	sbis	0x15, 7	; 21
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x26>
			DataPort = 1;
  e8:	45 bb       	out	0x15, r20	; 21
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <main+0x2c>
		else
			DataPort = DataPort << 1;	// Shift to the left
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	88 0f       	add	r24, r24
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	c9 01       	movw	r24, r18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x2e>
  f8:	f5 cf       	rjmp	.-22     	; 0xe4 <main+0x1e>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
